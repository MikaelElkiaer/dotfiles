#!/usr/bin/env bash

trap 'unset -f _query' EXIT

set -euo pipefail

DEFAULT_CLONE_DIR="${HOME}/Repositories/GitHub"

function main() {
  init_args "$@"

  ARG_QUERY="${ARG_QUERY:-}"
  ARG_SOURCE="${ARG_SOURCE:-tmux}"

  case "${ARG_SOURCE}" in
  kubeswitch)
    exec fzf \
      --ansi --border-label ' session-picker ' --prompt '󱃾 ' \
      --header="^g github ^t tmux ^x zoxide" --header-first \
      --bind="ctrl-g:become(session-picker --source=github --query={q})" \
      --bind="ctrl-t:become(session-picker --source=tmux --query={q})" \
      --bind="ctrl-x:become(session-picker --source=zoxide --query={q})" \
      --query="${ARG_QUERY}" \
      < <(switcher list-contexts) |
      {
        read -r CHOICE

        if tmux has-session -t "=$CHOICE" 2>/dev/null; then
          tmux switch-client -t "$CHOICE"
        else
          echo "Loading Kubernetes context..." >&2
          read -r KUBECONFIG NAME <<<"$(switcher set-context "$CHOICE" | sed -E 's/^__ (.*),(.*)/\1 \2/')"
          # INFO: Create symlink based on session name
          # - so that session can be cleaned up by a hook
          ln --symbolic --force "$KUBECONFIG" "/tmp/TMUX_${CHOICE}_KUBECONFIG"
          # TODO: Remove once fixed
          # - see https://github.com/derailed/k9s/issues/1895
          tmux new-session -c "$HOME" -d -e "KUBECONFIG=$KUBECONFIG" -e "KUBECACHEDIR=$HOME/.kube/cache" -s "$NAME" bash -i -c 'k9s;exec bash'
          tmux switch-client -t "$NAME"
        fi
      }
    ;;
  github)
    USERNAME="$(yq '.["github.com"].user' <~/.config/gh/hosts.yml)"
    function _query() {
      pkill -f session-picker-query || true
      exec -a session-picker-query bash -c "
        [ -n \"$1\" ] \
          && sleep 1 \
          && gh search repos --json=name,owner --jq='map(\"\(.owner.login)/\(.name)\")[]' --match=name \"$1\" || true;
        "
    }
    export -f _query
    exec fzf \
      --ansi --border-label ' session-picker ' --prompt ' search> ' \
      --header="^s kubeswitch ^t tmux ^x zoxide" --header-first \
      --bind="load:reload-sync(_query {q})+unbind(load)" \
      --bind="change:reload-sync(_query {q})" \
      --preview "sed -E 's,repo:(.*)$,\1,' <<<\"{}\" | xargs gh repo view | glow --style auto -" \
      --bind="ctrl-s:become(session-picker --source=kubeswitch --query={q})" \
      --bind="ctrl-t:become(session-picker --source=tmux --query={q})" \
      --bind="ctrl-x:become(session-picker --source=zoxide --query={q})" \
      --query="${ARG_QUERY}" \
      < <(echo -n) |
      {
        read -r NAME
        OWNER="$(dirname "$NAME")"
        NAME="$(basename "$NAME")"
        if [ "$USERNAME" = "$OWNER" ]; then
          SUBPATH="$NAME"
        else
          SUBPATH="$OWNER/$NAME"
        fi

        if ! [ -d "$DEFAULT_CLONE_DIR/$SUBPATH" ]; then
          gh repo clone "$SUBPATH" "$DEFAULT_CLONE_DIR/${SUBPATH}"
          if command -v zoxide &>/dev/null; then
            zoxide add "$DEFAULT_CLONE_DIR/$SUBPATH"
          fi
        fi

        if tmux has-session -t "=$NAME" 2>/dev/null; then
          tmux switch-client -t "$NAME"
        else
          tmux new-session -c "$DEFAULT_CLONE_DIR/$SUBPATH" -d -s "$NAME" bash -i -c "nvim -c ':lua require(\"persistence\").load()';exec bash"
          tmux switch-client -t "$NAME"
        fi
      }
    ;;
  zoxide)
    exec fzf \
      --ansi --border-label ' session-picker ' --prompt ' ' \
      --header="^g github ^s kubeswitch ^t tmux" --header-first \
      --bind="ctrl-g:become(session-picker --source=github --query={q})" \
      --bind="ctrl-s:become(session-picker --source=kubeswitch --query={q})" \
      --bind="ctrl-t:become(session-picker --source=tmux --query={q})" \
      --query="${ARG_QUERY}" \
      --preview="tree -C {}" < <(zoxide query --list) |
      {
        read -r CHOICE
        NAME="$(basename "$CHOICE")"
        if tmux has-session -t "=$NAME" 2>/dev/null; then
          tmux switch-client -t "$NAME"
        else
          tmux new-session -c "$CHOICE" -d -s "$NAME" bash -i -c "nvim -c ':lua require(\"persistence\").load()';exec bash"
          tmux switch-client -t "$NAME"
        fi
      }
    ;;
  tmux)
    exec fzf \
      --ansi --border-label ' session-picker ' --prompt ' ' \
      --header="^g github ^s kubeswitch ^x zoxide" --header-first \
      --bind="ctrl-g:become:session-picker --source=github --query={q}" \
      --bind="ctrl-s:become:session-picker --source=kubeswitch --query={q}" \
      --bind="ctrl-x:become:session-picker --source=zoxide --query={q}" \
      --preview="tmux lsw -F \" #{window_name}\" -t {}" \
      --query="${ARG_QUERY}" \
      < <(tmux list-sessions -f "#{!=:#{session_attached},1}" -F "#{session_name} #{session_activity} #{session_attached}" | sort -k2,2r | awk '{print $1}') |
      {
        read -r NAME
        tmux switch-client -t "$NAME"
      }
    ;;
  *)
    echo "Unknown source: $ARG_SOURCE" >&2
    ;;
  esac
}

function init_args() {
  optspec="s:-:"
  while getopts "$optspec" optchar; do
    case "${optchar}" in
    -)
      case "${OPTARG}" in
      query)
        ARG_QUERY="${!OPTIND}"
        OPTIND=$((OPTIND + 1))
        ;;
      query=*)
        ARG_QUERY=${OPTARG#*=}
        ;;
      source)
        ARG_SOURCE="${!OPTIND}"
        OPTIND=$((OPTIND + 1))
        ;;
      source=*)
        ARG_SOURCE=${OPTARG#*=}
        ;;
      *)
        if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
          echo "Unknown option --${OPTARG}" >&2
        fi
        ;;
      esac
      ;;
    q)
      ARG_QUERY="${OPTARG}"
      ;;
    s)
      ARG_SOURCE="${OPTARG}"
      ;;
    *)
      if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
        echo "Non-option argument: '-${OPTARG}'" >&2
      fi
      ;;
    esac
  done
}

main "$@"
